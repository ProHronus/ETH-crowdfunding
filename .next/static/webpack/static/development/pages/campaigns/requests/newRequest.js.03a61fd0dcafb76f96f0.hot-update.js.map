{"version":3,"file":"static/webpack/static\\development\\pages\\campaigns\\requests\\newRequest.js.03a61fd0dcafb76f96f0.hot-update.js","sources":["webpack:///./pages/campaigns/requests/newRequest.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Card, Button, Form, Message, Input } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\nimport Layout from '../../../components/layout.js';\r\nimport { Link, Router } from '../../../routes';\r\nimport campaignJS from '../../../ethereum/campaing.js';\r\nimport web3JS from '../../../ethereum/web3';\r\n\r\nimport { ErrorForm } from '../../../components/ErrorForm';\r\nimport { SuccessForm } from '../../../components/SuccessForm';\r\nimport { messageStrings } from '../../../ethereum/messagestrings';\r\nimport { isValueValid, valueType } from '../../../components/valueValidation'\r\n\r\n\r\nclass NewRequest extends Component {\r\n    state = {\r\n        etherValue: '',\r\n        description: '',\r\n        recipient: '',\r\n        hash: '',\r\n        confirmationNumber: 0,\r\n        etherValueValid: false,\r\n        walletAddressValid: false,\r\n        isConfirmed: false,\r\n        btnLoading: false,\r\n        btnDisabled: true\r\n    }\r\n\r\n    static async getInitialProps(props) {\r\n        return {\r\n            address: props.query.address,\r\n        };\r\n    }\r\n\r\n     handleUserInput = async (event, inputValueType) => {\r\n        const value = event.target.value;\r\n        let valueValid;\r\n        switch (inputValueType) {\r\n            case valueType.ETHER:\r\n                this.setState({ etherValue:value });\r\n                valueValid = isValueValid(value, valueType.ETHER);\r\n                if (valueValid) {\r\n                    await this.setState({\r\n                        errorMessage: '',\r\n                        etherValueValid: true,\r\n                    })\r\n                } else {\r\n                    await this.setState({\r\n                        errorMessage: 'The Ether value is invalid',\r\n                        etherValueValid: false,\r\n                    });\r\n                }\r\n                break;\r\n            case valueType.WALLETADDRESS:\r\n                this.setState({ recipient: value });\r\n                valueValid = isValueValid(value, valueType.WALLETADDRESS);\r\n                if (valueValid) {\r\n                    await this.setState({\r\n                        errorMessage: '',\r\n                        walletAddressValid: true,\r\n                    })\r\n                } else {\r\n                    await this.setState({\r\n                        errorMessage: 'The wallet address is invalid',\r\n                        walletAddressValid: false,\r\n                    });\r\n                }\r\n        }\r\n        if (this.state.etherValueValid && this.state.walletAddressValid){\r\n            await this.setState({\r\n                btnDisabled: false\r\n            })\r\n        } else {\r\n            await this.setState({\r\n                btnDisabled: true\r\n            })\r\n        }\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ btnLoading: true, errorMessage: '' });\r\n\r\n\r\n        const campaign = await campaignJS.campaignInit(this.props.address);\r\n        const web3 = await web3JS.web3Init();\r\n        const { description, etherValue: value, recipient } = this.state;\r\n\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            campaign.methods.createRequest(\r\n                description,\r\n                web3.utils.toWei(value, 'ether'),\r\n                recipient)\r\n                .send({\r\n                    from: accounts[0]\r\n                }).on('transactionHash', (hash) => {\r\n                    this.setState({\r\n                        hash: hash\r\n                    });\r\n                    this.setState({ btnLoading: false });\r\n                }).on('confirmation', (confirmationNumber) => {\r\n                    this.setState({\r\n                        confirmationNumber: confirmationNumber\r\n                    });\r\n                    if (confirmationNumber == 3) {\r\n                        Router.pushRoute(`/campaigns/${this.props.address}/requests`);\r\n                    }\r\n                }).on('error', (error) => {\r\n                    this.setState({ btnLoading: false });\r\n                    if (error.message.includes('User denied transaction')) {\r\n                        this.setState({\r\n                            errorMessage: messageStrings.TXDENIED\r\n                        });\r\n                    } else {\r\n                        this.setState({\r\n                            errorMessage: error.message\r\n                        })\r\n                    }\r\n                });\r\n        } catch (error) {\r\n            this.setState({\r\n                errorMessage: error.message\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <h3>Create a new request</h3>\r\n                <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} warning={!!this.state.hash}>\r\n                    <Form.Field>\r\n                        <label>Description</label>\r\n                        <Form.Input\r\n                            value={this.state.description}\r\n                            onChange={event => this.setState({ description: event.target.value })}\r\n                        ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Value in Ether</label>\r\n                        <Form.Input\r\n                            value={this.state.etherValue}\r\n                            onChange={(e) => this.handleUserInput(e, valueType.ETHER)}\r\n                        ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Recipient</label>\r\n                        <Form.Input\r\n                            value={this.state.recipient}\r\n                            onChange={(e) => this.handleUserInput(e, valueType.WALLETADDRESS)}\r\n                        ></Form.Input>\r\n                    </Form.Field>\r\n                    <Link route={`/campaigns/${this.props.address}/requests`}>\r\n                        <a>\r\n                            <Button >Back</Button>\r\n                        </a>\r\n                    </Link >\r\n                    <Button primary disabled={this.state.btnDisabled} loading={this.state.btnLoading}>\r\n                        Create\r\n                    </Button>\r\n                    <ErrorForm message={this.state.errorMessage} />\r\n                    <SuccessForm hash={this.state.hash} confirmationNumber={this.state.confirmationNumber} />\r\n                </Form>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nNewRequest.propTypes = {\r\n    address: PropTypes.string.isRequired\r\n}\r\n\r\nexport default NewRequest;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AASA;AACA;AAFA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAcA;AACA;AAFA;AACA;AAdA;AAAA;AACA;AADA;AAoBA;AAAA;AAAA;AACA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAwBA;AACA;AAFA;AACA;AAxBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA6BA;AACA;AAFA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAoCA;AADA;AACA;AApCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwCA;AADA;AACA;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA4CA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AAKA;AADA;AAGA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAxCA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAyCA;AACA;AADA;AACA;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgDA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AAAA;AAAA;AAFA;AAKA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAIA;;;;;;AA3IA;;;;;AACA;AACA;AADA;AACA;;;;;;;;;;;;;;;;;;AAhBA;AACA;AA2JA;AACA;AADA;AAIA;;;;A","sourceRoot":""}