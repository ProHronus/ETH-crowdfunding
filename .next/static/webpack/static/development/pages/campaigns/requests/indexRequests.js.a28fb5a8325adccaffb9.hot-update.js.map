{"version":3,"file":"static/webpack/static\\development\\pages\\campaigns\\requests\\indexRequests.js.a28fb5a8325adccaffb9.hot-update.js","sources":["webpack:///./components/RequestRow.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Button } from 'semantic-ui-react';\r\nimport PropTypes from 'prop-types';\r\nimport campaignJS from '../ethereum/campaing.js';\r\nimport web3JS from '../ethereum/web3';\r\nimport { Router } from '../routes';\r\n\r\nimport { ErrorForm } from './ErrorForm';\r\nimport { SuccessForm } from './SuccessForm';\r\nimport { messageStrings } from '../ethereum/messagestrings';\r\n\r\nlet web3;\r\n\r\nclass RequestRow extends Component {\r\n\r\n    state = {\r\n        errorMessage: '',\r\n        hash: '',\r\n        confirmationNumber: 0,\r\n        btnApproveLoading: false,\r\n        btnFinalizeLoading: false,\r\n    }\r\n\r\n    onApprove = async (event) => {\r\n        event.preventDefault();\r\n\r\n        web3 = await web3JS.web3Init();\r\n        this.setState({ btnApproveLoading: true, errorMessage: '' });\r\n\r\n        const campaign = await campaignJS.campaignInit(this.props.address);\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        try {\r\n            await campaign.methods.approveRequest(this.props.id).send({\r\n                from: accounts[0]\r\n\r\n            }).on('transactionHash', (hash) => {\r\n                this.setState({\r\n                    hash: hash,\r\n                    btnApproveLoading: false,\r\n                });\r\n            }).on('confirmation', (confirmationNumber) => {\r\n                this.setState({\r\n                    confirmationNumber: confirmationNumber\r\n                });\r\n                if (confirmationNumber == 1) {\r\n                    Router.replaceRoute(`/campaigns/${this.props.address}/requests`);\r\n                }\r\n            }).on('error', (error) => {\r\n                this.setState({\r\n                    btnApproveLoading: false,\r\n                });\r\n                if (error.message.includes('User denied transaction')) {\r\n                    this.setState({\r\n                        errorMessage: messageStrings.TXDENIED\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        errorMessage: error.message\r\n                    })\r\n                }\r\n            });\r\n        } catch (error) {\r\n            this.setState({\r\n                errorMessage: error.message,\r\n                btnApproveLoading: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    onFinalize = async (event) => {\r\n        event.preventDefault();\r\n\r\n        web3 = await web3JS.web3Init();\r\n        this.setState({ btnFinalizeLoading: true, errorMessage: '' });\r\n\r\n        const campaign = await campaignJS.campaignInit(this.props.address);\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        try {\r\n            await campaign.methods.finalizeRequest(this.props.id).send({\r\n                from: accounts[0]\r\n\r\n            }).on('transactionHash', (hash) => {\r\n                this.setState({\r\n                    hash: hash,\r\n                    btnFinalizeLoading: false,\r\n                });\r\n            }).on('confirmation', (confirmationNumber) => {\r\n                this.setState({\r\n                    confirmationNumber: confirmationNumber\r\n                });\r\n                if (confirmationNumber == 1) {\r\n                    Router.replaceRoute(`/campaigns/${this.props.address}/requests`);\r\n                }\r\n            }).on('error', (error) => {\r\n                this.setState({\r\n                    btnFinalizeLoading: false,\r\n                });\r\n                if (error.message.includes('User denied transaction')) {\r\n                    this.setState({\r\n                        errorMessage: messageStrings.TXDENIED\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        errorMessage: error.message\r\n                    })\r\n                }\r\n            });\r\n        } catch (error) {\r\n            this.setState({\r\n                errorMessage: error.message,\r\n                btnFinalizeLoading: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    FinalizerValidator(){\r\n        if(!this.props.request.complete){\r\n            return\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { Row, Cell } = Table;\r\n        const { id, request, approversCount } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Cell> {id} </Cell>\r\n                    <Cell> {request.desciption} </Cell>\r\n                    <Cell> {request.value} </Cell>\r\n                    <Cell> {request.recipient} </Cell>\r\n                    <Cell> {request.approvalCount}/{approversCount} </Cell>\r\n                    <Cell>\r\n                        <Button color=\"green\" basic\r\n                            onClick={this.onApprove}\r\n                            loading={this.state.btnApproveLoading}>\r\n                            Approve\r\n                    </Button>\r\n                    </Cell>\r\n                    <Cell>\r\n                        <Button color=\"teal\" basic\r\n                            onClick={this.onFinalize}\r\n                            loading={this.state.btnFinalizeLoading}>\r\n                            Finalize\r\n                    </Button>\r\n                    </Cell>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nRequestRow.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    request: PropTypes.object.isRequired,\r\n    approversCount: PropTypes.number.isRequired\r\n\r\n}\r\nexport default RequestRow;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AAAA;AAWA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAvCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuCA;AACA;AACA;AAFA;AACA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AAAA;AAWA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAvCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuCA;AACA;AACA;AAFA;AACA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AASA;AAAA;AACA;AACA;AAFA;AAOA;AAAA;AACA;AACA;AAFA;AASA;;;;AA7IA;AACA;AAgJA;AACA;AACA;AACA;AAHA;AAMA;;;;A","sourceRoot":""}